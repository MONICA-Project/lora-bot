name: Build, Test, Publish Lora-Bot
on: [push]

jobs:
  build:
    name: Build, pack and release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout parent project with dependencys
      uses: actions/checkout@v1
      with:
        repository: MONICA-Project/lora-project
        ref: refs/heads/master
        submodules: true

#    - name: Checkout last versions
#      run: git -C Lora checkout --progress --force dotnetcore
#      working-directory: ../lora-project

    - name: Checkout last versions
      run: git -C Lora-Bot checkout --progress --force ${{ github.sha }}
      working-directory: ../lora-project

    - name: Install dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100

    - name: Build with dotnet
      run: dotnet build Lora-Bot.sln --configuration Release
      working-directory: ../lora-project/Lora-Bot

    - name: Create deb files
      if: success()
      run: |
        mkdir ../../../Builds 
        chmod oug+x make-deb.sh 
        ./make-deb.sh armhf
      id: create_deb
      working-directory: ../lora-project/Lora-Bot/Lora-Bot/dpkg

    - name: Create release
      if: success()
      id: nightly_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_deb.outputs.builddaterelease }}
        release_name: Nightly from ${{ steps.create_deb.outputs.builddaterelease }}
        body: This is a nightly release. It may be not working properly.
        draft: false
        prerelease: true
        
    - name: Upload release asset armhf
      if: success()
      id: upload-release-asset-armhf
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.nightly_release.outputs.upload_url }}
        asset_path: ../lora-project/Builds/armhf-${{ steps.create_deb.outputs.debuilderfile }}
        asset_name: armhf-${{ steps.create_deb.outputs.debuilderfile }}
        asset_content_type: application/x-deb

# VMAJOR=$(grep -e "<Version>" ../TTN-Bridge_Core.csproj | cut -d'>' -f 2 | cut -d'<' -f 1 | cut -d'.' -f 1)
# VMINOR=$(grep -e "<Version>" ../TTN-Bridge_Core.csproj | cut -d'>' -f 2 | cut -d'<' -f 1 | cut -d'.' -f 2)
# VBUILD=$(grep -e "<Version>" ../TTN-Bridge_Core.csproj | cut -d'>' -f 2 | cut -d'<' -f 1 | cut -d'.' -f 3)
# TARGETFILE="ttnbridge_$VMAJOR.$VMINOR-$VBUILD.deb"
# echo "##[set-output name=debuilderfile;]$TARGETFILE"
# echo "##[set-output name=builddaterelease;]$(date +"%F_%H%M%S")"